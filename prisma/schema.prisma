// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(EMPLOYEE)
  accounts      Account[]
  sessions      Session[]
  employee      Employee?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id               String            @id @default(cuid())
  userId           String            @unique
  employeeCode     String            @unique
  firstName        String
  lastName         String
  position         String?
  department       String?
  hireDate         DateTime?
  salary           Float?
  phone            String?
  address          String?
  emergencyContact String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  vacationRequests VacationRequest[]
  fundRequests     FundRequest[]
  generalRequests  GeneralRequest[]
}

model VacationRequest {
  id             String            @id @default(cuid())
  employeeId     String
  startDate      DateTime
  endDate        DateTime
  daysRequested  Int
  reason         String?
  status         RequestStatus     @default(PENDING)
  approvedBy     String?
  approvedAt     DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  employee       Employee          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model FundRequest {
  id           String        @id @default(cuid())
  employeeId   String
  fundType     FundType
  amount       Float
  reason       String
  requestType  String
  status       RequestStatus @default(PENDING)
  approvedBy   String?
  approvedAt   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  employee     Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model GeneralRequest {
  id          String        @id @default(cuid())
  employeeId  String
  requestType String
  subject     String
  description String
  priority    Priority      @default(MEDIUM)
  status      RequestStatus @default(PENDING)
  assignedTo  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  employee    Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  HR
  MANAGER
  EMPLOYEE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
}

enum FundType {
  TRAVEL
  TRAINING
  EQUIPMENT
  MEDICAL
  EMERGENCY
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
